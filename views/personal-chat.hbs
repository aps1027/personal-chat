<div class="row clearfix">
    <div class="col-lg-12">
        <div class="card chat-app">
            <div id="plist" class="people-list">
                <div class="row p-3 profile m-0">
                    <a href="javascript:void(0);" data-toggle="modal" data-target="#view_info">
                        <img src="{{image}}" alt="avatar" referrerpolicy="no-referrer" />
                    </a>
                    <div>
                        <h5>{{name}}</h5>
                    </div>
                </div>

                <div class="input-group p-2 mt-2">
                    <div class="input-group-prepend">
                        <a class="btn input-group-text" id="js_search_cancel"><i class="fa fa-xmark"></i></a>
                    </div>
                    <input type="text" id="js_search_user" class="form-control" placeholder="Search..." />
                </div>
                <ul id="js_search_result" class="list-unstyled chat-list mt-2 mb-0">
                </ul>
            </div>
            <div class="chat" id="js_chat">
            </div>
        </div>
    </div>
</div>
<script>
    const CURRENT_USER_ID = "{{id}}";
    let CURRENT_ROOM_ID = "";

    const socket = io();
    if (!("Notification" in window)) {
        alert("This browser does not support desktop notification");
    }
    // Otherwise, we need to ask the user for permission
    else if (Notification.permission !== "denied") {
        Notification.requestPermission();
    }

    socket.emit('user connect', {
        user_id: CURRENT_USER_ID
    });

    socket.on("private message", ({ message, from, roomId }) => {
        if (roomId === CURRENT_ROOM_ID) {
            showSingleMessage(from, message);
        }
    });

    socket.on("user disconnected", ({ user }) => {
        $(`[data-id="${user}"] .status`).empty();
        $(`[data-id="${user}"] .status`).append(
            '<i class="fa fa-circle offline"></i> offline');
    })

    socket.on("user connected", ({ user }) => {
        $(`[data-id="${user}"] .status`).empty();
        $(`[data-id="${user}"] .status`).append(
            '<i class="fa fa-circle online"></i> online');
    })

    socket.on("show noti", ({ room, user, noti }) => {
        let room_ids = [];
        $("#js_search_result").find("li").each(function () { room_ids.push(this.id); });

        if (!room_ids.includes(room._id)) {
            $("#js_search_result").append(createUserCard(user, room));
        }

        if (room._id !== CURRENT_ROOM_ID) {
            showNoti(room);
            const msgNoti = new Notification('Personal Chat', {
                body: 'You have new messages.',
                icon: 'img/logo.png'
            });
            msgNoti.addEventListener('click', function(){
                window.open(window.location.href);
            });

            socket.emit("save noti", {
                type: 1, // 1 is for message, 2 is for call
                room: room._id,
                from: user._id,
                to: CURRENT_USER_ID
            });
        }
    });

    const selectTargetUser = (tragetId) => {
        location.href = `/chat/${tragetId}`;
    };

    const showNoti = (room) => {
        $(`#${room._id} .noti`).remove();
        $(`#${room._id}`).append(`
                <div class="noti badge badge-light float-right m-2 text-danger" style="font-size: 18px;">
                    <i class="fas fa-bell"></i>
                </div>`);
    }

    const createUserCard = (user, room) => {
        return `<li ${room ? `id="${room._id}"` : ''} data-id="${user._id}" class="clearfix" onclick="showChat('${user._id}', this)">
                    <img src="${user.image}" alt="avatar" referrerpolicy="no-referrer" />
                    <div class="about">
                        <div class="name">${user.displayName}</div>
                        <div class="status">
                            ${user.connected ?
                '<i class="fa fa-circle online"></i> online' :
                '<i class="fa fa-circle offline"></i> offline'}
                        </div>
                    </div>
                </li>`
    }

    const showChatHeader = (user) => {
        $("#js_chat_header").remove();
        $("#js_chat").append(`<div id="js_chat_header" class="chat-header clearfix">
            <div class="row">
                <div class="col-lg-6" data-id="${user._id}">
                    <img src="${user.image}" alt="avatar" referrerpolicy="no-referrer" />
                    <div class="chat-about">
                        <div class="name">${user.displayName}</div>
                        <div class="status">
                            ${user.connected ?
                '<i class="fa fa-circle online"></i> online' :
                '<i class="fa fa-circle offline"></i> offline'}
                        </div>
                    </div>
                </div>
            </div>
        </div>`);
    }

    const showSingleMessage = (from, message) => {
        let lastMessageClassList = $('.chat-history ul li div').last().attr('class');
        let classList = `message ${from === CURRENT_USER_ID ? 'my-message float-right' : 'other-message'}`;
        $("#js_chat_messages ul").append(
            `<li class="clearfix">
                <div class="${lastMessageClassList && lastMessageClassList.includes(classList) ? classList : classList + ' mt-2'}">
                    ${message}</div>
            </li>`);

        $("#js_chat_messages").scrollTop($("#js_chat_messages ul")[0].scrollHeight);
    }
    const showChatMessages = (messages) => {
        $("#js_chat_messages").remove();
        $("#js_chat").append(
            `<div class="chat-history" id="js_chat_messages"><ul class="m-b-0"></ul></div>`);
        messages.forEach((message) => {
            showSingleMessage(message.from, message.text)
        });
    }

    const showMessageBox = (user, room) => {
        $("#js_chat_message_box").remove();
        $("#js_chat").append(`<div class= "chat-message clearfix" id="js_chat_message_box">
            <form onsubmit="sendMessage('${user._id}', '${room._id}')">
            <div class="input-group mb-0">
                <div class="input-group-prepend">
                    <button type="submit" class="input-group-text"><i class="fa fa-paper-plane"></i></button>
                </div>
                <input type="text" class="form-control" placeholder="Enter text here..." id="js_message" autocomplete="off" />
            </div>
            </form>
        </div > `);
    }


    const sendMessage = (tragetId, roomId) => {
        event.preventDefault();
        if (js_message.value) {
            socket.emit("send message", {
                message: js_message.value,
                roomId: roomId,
                from: CURRENT_USER_ID,
                to: tragetId
            });
            showSingleMessage(CURRENT_USER_ID, js_message.value);
            js_message.value = "";
        }
    }

    const showChat = (targetUserId, element) => {
        $(element).children(".noti").remove();
        $.post("/api/chat-room",
            {
                "target_user": targetUserId,
                "current_user": CURRENT_USER_ID
            },
            function (data, status) {
                CURRENT_ROOM_ID = data.room._id;
                showChatHeader(data.user);
                showChatMessages(data.messages);
                showMessageBox(data.user, data.room);

                socket.emit('select room', {
                    room_id: CURRENT_ROOM_ID,
                });
            }
        );
    }

    const showFriendList = () => {
        $("#js_search_result").empty();
        $.get(`/api/chat-room`,
            function (data, status) {
                data.rooms.forEach((room) => {
                    room.members.forEach((user) => {
                        $("#js_search_result").append(createUserCard(user, room));
                        if (data.notiRooms.includes(room._id)) {
                            showNoti(room);
                        }
                    })
                });
            }
        );
    }


    $("#js_search_user").on('keyup', function () {
        $.post("/api/user-search",
            {
                "search_user": this.value
            },
            function (data, status) {
                $("#js_search_result").empty();
                data.forEach((user) => {
                    $("#js_search_result").append(
                        CURRENT_USER_ID !== user._id ? createUserCard(user) : ``);
                });

            });
    });

    $("#js_search_cancel").on('click', function () {
        $("#js_search_user").val("");
        showFriendList();
    });


    showFriendList();
</script>